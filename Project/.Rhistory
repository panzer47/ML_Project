set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 3)
for(i in 1:200) {
set.seed(666)
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 1 )
}
boxplot(random_norm[,1])
plot(random_norm[,1], random_exp)
plot(random_norm[,2], random_exp)
datafr<-data.frame(random_exp, random_norm)
V
View(random_exp,)
plot(random_norm[,2])
x<-lm( random_exp ~random_norm[,1]+random_norm[,2] )
summary(x)
plot(x)
plot(random_norm[,2], random_norm[,2])
stripchart(random_norm[,1])
x<-lm( random_exp ~random_norm[,1]+random_norm[,2] )
plot(x)
par(mfrow=c(2,2))
plot(x)
random_norm
plot(random_norm[,1], random_norm[,2])
plot(random_norm[,1])
plot(random_norm[,2], random_exp)
plot( random_exp, random_norm[,2])
plot( random_exp, random_norm[,1])
?rnorm
i<-0
set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 1/3)
i<-0
for(i in 1:200) {
set.seed(666)
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 2.5 )
}
plot( random_exp, random_norm[,1])
plot( random_exp, random_norm[,2])
rm(list=ls())
set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 1/3)
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 2.5 )
}
plot(random_norm[,1])
plot( random_exp, random_norm[,2])
plot( random_exp, random_norm[,1])
rm(list=ls())
set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 3)
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 2 )
}
plot( random_exp, random_norm[,1])
plot( random_exp, random_norm[,2])
x<-lm( random_exp ~random_norm[,1]+random_norm[,2] )
summary(x)
rm(list=ls())
set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 3)
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 1 )
}
plot( random_exp, random_norm[,2])
datafr<-data.frame(random_exp, random_norm)
x<-lm( random_exp ~random_norm[,1]+random_norm[,2] )
summary(x)
par(mfrow=c(2,2))
plot(x)
rm(list=ls())
set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 2)
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 1 )
}
datafr<-data.frame(random_exp, random_norm)
x<-lm( random_exp ~random_norm[,1]+random_norm[,2] )
summary(x)
plot(x)
plot( random_exp, random_norm[,1])
plot( random_exp, random_norm[,2])
plot( random_exp, random_norm[,1])
par(mfrow=c(1,1))
plot( random_exp, random_norm[,1])
?plot
plot( random_exp, random_norm[,1], xlab="Random exponential samples with λ=2", ylab="gaussian noise")
?abline
?abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2))
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2))
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2) , col="grey")
plot( random_exp, random_norm[,1], xlab="Random exponential samples with λ=2", ylab="Gaussian noise")
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2) , col="grey")
plot( random_exp, random_norm[,1], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2) , col="grey")
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2 , 3) , col="grey")
x<-lm( random_exp ~random_norm[,1] ) # +random_norm[,2]
summary(x)
plot(x)
par(mfrow=c(2,2))
x<-lm( random_exp ~random_norm[,1] ) # +random_norm[,2]
plot(x)
?plot.lm
plot.lm(x)
library(stats)
plot.lm(x)
par(mfrow=c(2,3))
plot(x)
plot(x, which=c(1:6))
par(mfrow=c(1,1))
plot( random_exp, random_norm[,1], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2 , 3) , col="grey")
?abline
plot( random_exp, random_norm[,1], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2 , 3) , col="grey")
abline(a=0.34599 , b=0.29044 col="red")
abline(a=0.34599 , b=0.29044, col="red")
x<-lm( random_exp ~random_norm[,2] ) # +random_norm[,2]
summary(x)
plot( random_exp, random_norm[,2], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2 , 3) , col="grey")
abline(a=0.36501 , b=0.17486, col="red")
rm(list=ls())
set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 2)
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 600 )
}
?plot
plot( random_exp, random_norm[,2], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,0,1,2 , 3) , col="grey")
x<-lm( random_exp ~random_norm[,2] ) # +random_norm[,2]
summary(x)
par(mfrow=c(1,2))
rm(list=ls())
set.seed(666)
random_norm<-matrix(nrow= 200, ncol=2)
random_exp<-rexp(200, rate = 2)
i<-0
for(i in 1:200) {
# random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = 1)
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 60 )
}
x<-lm( random_exp ~random_norm[,1]+random_norm[,2] ) # +random_norm[,2]
summary(x)
plot( random_exp, random_norm[,1], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
par(mfrow=c(2,1))
plot( random_exp, random_norm[,1], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-1,-2 , 0,1,2 ) , col="grey")
abline(a=0.3957 , b=0.029, col="red")
plot( random_exp, random_norm[,2], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-150,-50 , 0, 50,150 ) , col="grey")
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-150,-75,75,-50 , 0, 50,150 ) , col="grey")
abline( h=c(-75,75 ) , col="white")
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-150,100,-100,-75,75,-50 , 0, 50,150 ) , col="grey")
abline( h=c(-75,75 ) , col="white")
abline(a=0.3957 , b=0.0003593, col="red")
library(lmtest)
?bgtest
bgtest(x)
hist(residuals(x))
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
#random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = 1)
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 60 )
}
x<-lm( random_exp ~random_norm[,1] ) # +random_norm[,2]
summary(x)
hist(residuals(x))
par(mfrow=c(1,1))
hist(residuals(x))
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
#random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = 1)
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 1 )
}
x<-lm( random_exp ~random_norm[,1], random_norm[,2] ) # +random_norm[,2]
par(mfrow=c(1,2))
hist(residuals(x))
summary(x)
x<-lm( random_exp ~random_norm[,1], random_norm[,2] ) # +random_norm[,2]
random_norm[,2]
x<-lm( random_exp ~random_norm[,1]+ random_norm[,2] ) # +random_norm[,2]
summary(x)
hist(residuals(x))
hist(residuals(x))
residuals(x)
x<-lm( random_exp ~random_norm[,1] ) # +random_norm[,2]
y<-lm( random_exp ~random_norm[,2] )
hist(residuals(x))
hist(residuals(y))
par(mfrow=c(1,2))
hist(residuals(x))
hist(residuals(y))
rm(list=ls())
set.seed(666)
random_exp<-rexp(200, rate = 2)
random_norm<-matrix(nrow= 200, ncol=3)
i<-0
for(i in 1:200) {
random_norm[i,1]<-rnorm(1, mean = random_exp[i], sd = sqrt( random_exp[i]))
random_norm[i,3]<-rnorm(1, mean = random_exp[i], sd = 60)
random_norm[i,2]<-rnorm(1, mean = random_exp[i], sd = 1 )
}
?plot
plot( random_exp, random_norm[,2], xlab="Random exponential samples with λ=2", ylab="Gaussian noise", col=123)
abline(a=0.3957 , b=0.0003593, col="red")
abline(v=c(0.0 , 0.5 , 1 , 1.5), h=c(-150,100,-100,-50 , 0, 50,150 ) , col="grey")
abline( h=c(-75,75 ) , col="white")
abline(a=0.36501 , b=0.17486, col="red")
datafr<-data.frame(random_exp, random_norm)
x<-lm( random_exp ~random_norm[,1] ) # +random_norm[,2]
y<-lm( random_exp ~random_norm[,2] )
z<-lm( random_exp ~random_norm[,3] )
summary(x)
par(mfrow=c(1,2,3))
hist(residuals(x))
hist(residuals(y))
hist(residuals(z))
par(mfrow=c(1,3))
hist(residuals(x))
hist(residuals(y))
hist(residuals(z))
plot(x)
par(mfrow=c(2,2))
plot(x)
plot(fitted.values(x), residuals(x) )
ncvTest(x)
spreadLevelPlot(x)
ncvTest(x) ; ncvTest(y) , ncvTest(z)
ncvTest(x) ; ncvTest(y) ; ncvTest(z)
par(mfrow=c(1,3))
spreadLevelPlot(x) ; spreadLevelPlot(y) ; spreadLevelPlot(z) ;
spreadLevelPlot(x^0.737) ; spreadLevelPlot(y) ; spreadLevelPlot(z) ;
?pow
?c^y
?^
3^2
spreadLevelPlot(x)^0.737 ; spreadLevelPlot(y) ; spreadLevelPlot(z) ;
bartlett.test(x)
bartlett.test(fitted.values(x) , residuals(x))
fitted.values(x)
library("FactoMineR", lib.loc="~/R/win-library/3.1")
library("Rcmdr", lib.loc="~/R/win-library/3.1")
library("RcmdrMisc", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.1")
install.packages("RcmdrPlugin.FactoMineR")
library("FactoMineR", lib.loc="~/R/win-library/3.1")
library("Rcmdr", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.FactoMineR", lib.loc="~/R/win-library/3.1")
library("RcmdrMisc", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.1")
library("Rcmdr", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.FactoMineR", lib.loc="~/R/win-library/3.1")
library("RcmdrMisc", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.1")
library("FactoMineR", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.FactoMineR", lib.loc="~/R/win-library/3.1")
library("Rcmdr", lib.loc="~/R/win-library/3.1")
library("RcmdrMisc", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.FactoMineR", lib.loc="~/R/win-library/3.1")
library("RcmdrMisc", lib.loc="~/R/win-library/3.1")
library("Rcmdr", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.1")
library("RcmdrPlugin.FactoMineR", lib.loc="~/R/win-library/3.1")
par(mfrow=c(2,1), las=1)
setwd("~/GitHub/ML_Project/Project")
data("pendigits.tra")
?data
data("pendigits.tra")
load("pendigits.tra")
training <- read.table("pendigits.tra", head=FALSE)
training <- read.table("pendigits.tra", head=FALSE, sep=",")
training
training[1,]
plot(training[1,] )
training[1,-17]
vector<-logical(length=16)
vector<-(TRUE, FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)
vector<-(TRUE, FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)
vector<-(TRUE; FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)
vector<-(TRUE, FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)
i<-1
i%2
i%%2
for(i in 1:10){
if(i%%2==1) vector=TRUE
}
for(i in 1:10){
if(i%%2==1) vector[i]=TRUE
}
vector=logical(length=16)
for(i in 1:10){
if(i%%2==1) vector[i]=TRUE
}
training[1,vector]
training[1,!vector]
for(i in 1:16){
if(i%%2==1) vector[i]=TRUE
}
training[1,vector]
plot(training[1,vector], training[1,!vector] )
a<-training[1,-17]
plot(a[vector], a[!vector] )
a[vector]
a[!vector]
?plot
plot(a[vector], a[!vector], type="p" )
plot(a[vector], a[!vector], type="p" )
a[vector]
a[!vector]
plot(a[vector], a[!vector], type="l" )
plot(a[vector], a[!vector] )
plo( [1,2,3],[4,5,6])
[1,2,3]
1,2,3
(1,2,3)
plot(a[vector], a[!vector] )
points(a[vector], a[!vector] )
plots()
plot()
plot(0,100)
points(a[vector], a[!vector] )
plot(0,100 ,100)
x<-0,100
x<-(0,100)
x<-vector();
x<-0,100;
x[1]<-0
x[2]<-100
plot(x,x)
points(a[vector], a[!vector] )
plot(x,x, col="white")
points(a[vector], a[!vector] )
training[1,]
training[1,vector]
vector
length(vector)
training[1,vector:16]
1&&1
training[1,(vector&&-17)]
training[1,(vector||-17)]
training[1,(vector||!17)]
training[1,(vector&&!17)]
training[1,(vector&&!17)]
a<-training[2,]
a<-training[2,-17]
points(a[vector], a[!vector] )
plot(x,x, col="white")
points(a[vector], a[!vector] )
?data
plot(x,x, col="white")
points(a[vector], a[!vector] )
training[2,]
a<-training[1,-17]
training[1,]
plot(x,x, col="white")
points(a[vector], a[!vector] )
for(i in 1:8)
points(training[2,2*i-1], training[2,2*i], col=i )
)
plot(x,x, col="white")
for(i in 1:8) points(training[2,2*i-1], training[2,2*i], col=i )
plot(x,x, col="white")
for(i in 1:8) points(training[1,2*i-1], training[1,2*i], col=i )
for(i in 1:8) points(training[3,2*i-1], training[3,2*i], col=i )
plot(x,x, col="white")
for(i in 1:8) points(training[3,2*i-1], training[3,2*i], col=i )
plot(x,x, col="white", title=training[3,17])
plot(x,x, col="black", title=training[3,17])
training[3,17]
training[3,17]
?plot
plot(x,x, col="black", main=training[3,17])
plot(x,x, col="white", main=training[3,17])
for(i in 1:8) points(training[3,2*i-1], training[3,2*i], col=i )
orig_train<-read.table("pendigits-orig.tra", head=FALSE, sep=",")
orig_train<-read.table("pendigits-orig.tes", head=FALSE, sep=",")
x[1]<-0
x[2]<-500
plot(x,x, col="white", main=orig[3,17])
plot(x,x, col="white", main=orig_train[3,17])
orig_train[3,17]
orig_train[2,]
plot(x,x, col="white", main=training[4,17])
for(i in 1:8) points(training[4,2*i-1], training[4,2*i], col=i )
x[1]<-0
x[2]<-100
plot(x,x, col="white", main=training[4,17])
for(i in 1:8) points(training[4,2*i-1], training[4,2*i], col=i )
plot(x,x, col="white", main=training[5,17])
for(i in 1:8) points(training[5,2*i-1], training[5,2*i], col=i )
?plot
plot(x,x, col="white", main=training[5,17], asp=1)
for(i in 1:8) points(training[5,2*i-1], training[5,2*i], col=i )
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i )
training[6,17]
?points
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i, type="l" )
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i, type="l" )
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i)
?points
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i, pch=1)
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i, pch=2)
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i, pch=3)
plot(x,x, col="white", main=training[6,17], asp=1)
for(i in 1:8) points(training[6,2*i-1], training[6,2*i], col=i, pch=4)
plot(x,x, col="white", main=training[1,17], asp=1)
for(i in 1:8) points(training[1,2*i-1], training[1,2*i], col=i, pch=4)
plot(x,x, col="white", main=training[1,17])
for(i in 1:8) points(training[1,2*i-1], training[1,2*i], col=i, pch=4)
library(chemometrics)
?Moutlier
trainig[,-17]
training[,-17]
mahal<-Moutlier(training[,-17])
mahal
summary(mahal)
?subset
tail(order(mahal$rd))
?tail
order(mahal$rd)
mahal$rd
order(mahal$rd)
?order
tail(order(mahal$rd, decreasing=TRUE))
plot(x,x, col="white", main=training[1365,17])
for(i in 1:8) points(training[1365,2*i-1], training[1365,2*i], col=i, pch=4)
plot(x,x, col="white", main=training[2,17])
for(i in 1:8) points(training[2,2*i-1], training[2,2*i], col=i, pch=4)
plot(x,x, col="white", main=training[3,17])
for(i in 1:8) points(training[3,2*i-1], training[3,2*i], col=i, pch=4)
plot(x,x, col="white", main=training[4,17])
for(i in 1:8) points(training[4,2*i-1], training[4,2*i], col=i, pch=4)
par(mfrow=c(8,8))
for(j in 25:50) {
plot(x,x, col="white", main=training[j,17])
for(i in 1:8) points(training[j,2*i-1], training[j,2*i], col=i, pch=4)
}
plot(x,x, col="white", main=training[j,17])
for(i in 1:8) points(training[j,2*i-1], training[j,2*i], col=i, pch=4)
training[j,2*i]
training[j,2*i-1]
plot(x,x, col="white", main=training[j,17])
plot(x,x, col="white", main=training[j,17])
plot(x,x, col="white", main=training[j,17])
plot(x,x, col="white", main=training[j,17])
training[j,17]
plot(x,x, col="white", main=training[j,17])
plot(x,x, col="white", main=training[j,17])
par(mfrow=c(4,4))
plot(x,x, col="white", main=training[j,17])
plot(x,x, col="white", main=training[j,17])
plot(x,x, col="white", main=training[j,17])
?par
plot(x,x, col="white", main=training[j,17])
for(j in 27:50) {
plot(x,x, col="white", main=training[j,17])
for(i in 1:8) points(training[j,2*i-1], training[j,2*i], col=i, pch=4)
}
training[j,17]
training[j,17]=="4"
for(j in 0:100) {
if(training[j,17]=="4"){
plot(x,x, col="white", main=training[j,17])
for(i in 1:8) points(training[j,2*i-1], training[j,2*i], col=i, pch=4)
}
for(j in 0:100) {
if(training[j,17]=="4"){
plot(x,x, col="white", main=training[j,17])
for(i in 1:8) points(training[j,2*i-1], training[j,2*i], col=i, pch=4)
}
for(j in 1:1000) {
if(training[j,17]=="4"){
plot(x,x, col="white", main=training[j,17])
for(i in 1:8) points(training[j,2*i-1], training[j,2*i], col=i, pch=4);
}
}
setwd("~/GitHub/ML_Project/Project")
training <- read.table("pendigits.tra", head=FALSE, sep=",")
head(training)
